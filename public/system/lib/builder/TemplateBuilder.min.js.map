{"version":3,"sources":["lib/builder/TemplateBuilder.min.js"],"names":["System","register","_export","_classCallCheck","instance","Constructor","TypeError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","hasContent","html","search","CONTENT_ATTR_REG_EX","CONTENT_NODE_REG_EX","replaceContent","newCebContentId","replace","findContentNode","el","oldCebContentId","getAttribute","OLD_CONTENT_ID_ATTR_NAME","querySelector","cleanOldContentNode","oldContentNode","lightDomNode","lightChildren","childNodes","length","push","removeChild","fillNewContentNode","children","newContentNode","forEach","child","appendChild","helper","tpl","TemplateBuilder","isFunction","isString","Builder","property","counter","_createClass","defineProperties","target","props","i","descriptor","defineProperty","key","protoProps","staticProps","_get","_x","_x2","_x3","_again","object","receiver","desc","parent","getter","undefined","Function","getOwnPropertyDescriptor","get","call","getPrototypeOf","setters","_lodashLangIsFunctionJs","_lodashLangIsStringJs","_BuilderJs","_PropertyBuilderJs","execute","_Builder","this","data","proto","on","build","invoke","handleContentNode","setAttribute","innerHTML"],"mappings":"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","file":"lib/builder/TemplateBuilder.min.js","sourcesContent":["System.register(['lodash/lang/isFunction.js', 'lodash/lang/isString.js', './Builder.js', './PropertyBuilder.js'], function (_export) {\n\n    /**\n     * The counter is used to generate unique DOM's id.\n     * @type {number}\n     */\n    'use strict';\n\n    var isFunction, isString, Builder, property, counter, OLD_CONTENT_ID_ATTR_NAME, CONTENT_ATTR_REG_EX, CONTENT_NODE_REG_EX, TemplateBuilder;\n\n    var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\n    var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\n    _export('default', helper);\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    /**\n     * @param {!string} html the HTML template\n     * @returns {boolean} true if the HTML template handle a light DOM node\n     */\n    function hasContent(html) {\n        return html.search(CONTENT_ATTR_REG_EX) !== -1 || html.search(CONTENT_NODE_REG_EX) !== -1;\n    }\n\n    /**\n     * Update or replace an eventual content flag according to the given id.\n     * @param {!string} html the HTML template\n     * @param {!string} newCebContentId the new content node id\n     * @returns {string} the updated HTML template\n     */\n    function replaceContent(html, newCebContentId) {\n        return html.replace('<content></content>', '<span ceb-content></span>').replace('ceb-content', newCebContentId);\n    }\n\n    /**\n     * Try to find a light DOM node\n     * @param {!HTMLElement} el the custom element\n     * @returns {HTMLElement} the light DOM node if found otherwise it's the given HTML Element\n     */\n    function findContentNode(el) {\n        if (!el) {\n            return;\n        }\n        var oldCebContentId = el.getAttribute(OLD_CONTENT_ID_ATTR_NAME);\n        if (oldCebContentId) {\n            return findContentNode(el.querySelector('[' + oldCebContentId + ']')) || el;\n        }\n        return el;\n    }\n\n    /**\n     * Remove and return the children of the light DOM node.\n     * @param {!HTMLElement} el the custom element\n     * @returns {Array<Node>} the children DOM nodes\n     */\n    function cleanOldContentNode(el) {\n        var oldContentNode = el.lightDomNode,\n            lightChildren = [];\n        while (oldContentNode.childNodes.length > 0) {\n            lightChildren.push(oldContentNode.removeChild(oldContentNode.childNodes[0]));\n        }\n        return lightChildren;\n    }\n\n    /**\n     * Add the given DOM nodes list to the given element.\n     * @param {!HTMLElement} el the custom element\n     * @param {Array<Node>} children the children DOM nodes\n     */\n    function fillNewContentNode(el, children) {\n        var newContentNode = el.lightDomNode;\n        children.forEach(function (child) {\n            newContentNode.appendChild(child);\n        });\n    }\n\n    /**\n     * The template builder.\n     * Its goal is to provide a way to fill the content of a custom element.\n     * @extends {Builder}\n     */\n\n    /**\n     * @ignore\n     */\n\n    function helper(tpl) {\n        return new TemplateBuilder(tpl);\n    }\n\n    return {\n        setters: [function (_lodashLangIsFunctionJs) {\n            isFunction = _lodashLangIsFunctionJs['default'];\n        }, function (_lodashLangIsStringJs) {\n            isString = _lodashLangIsStringJs['default'];\n        }, function (_BuilderJs) {\n            Builder = _BuilderJs['default'];\n        }, function (_PropertyBuilderJs) {\n            property = _PropertyBuilderJs['default'];\n        }],\n        execute: function () {\n            counter = 0;\n\n            /**\n             * The attribute name hosting the old light node id.\n             * @type {string}\n             */\n            OLD_CONTENT_ID_ATTR_NAME = 'ceb-old-content-id';\n\n            /**\n             * Regex to detect the *ceb-content* attributes.\n             * @type {RegExp}\n             */\n            CONTENT_ATTR_REG_EX = /ceb\\-content/im;\n\n            /**\n             * Regex to detect the *content* element.\n             * @type {RegExp}\n             */\n            CONTENT_NODE_REG_EX = /<content><\\/content>/im;\n\n            TemplateBuilder = (function (_Builder) {\n                _inherits(TemplateBuilder, _Builder);\n\n                /**\n                 * @param {!string|function(el: HTMLElement)} tpl the template as a string or a function\n                 */\n\n                function TemplateBuilder(tpl) {\n                    _classCallCheck(this, TemplateBuilder);\n\n                    _get(Object.getPrototypeOf(TemplateBuilder.prototype), 'constructor', this).call(this);\n                    /**\n                     * @ignore\n                     */\n                    this.data = { tpl: tpl };\n                }\n\n                /**\n                 * @ignore\n                 */\n\n                _createClass(TemplateBuilder, [{\n                    key: 'build',\n                    value: function build(proto, on) {\n                        var data = this.data,\n                            html = isString(data.tpl) ? data.tpl : null;\n\n                        property('lightDomNode').getter(function (el) {\n                            return findContentNode(el);\n                        }).build(proto, on);\n\n                        on('before:createdCallback').invoke(function (el) {\n                            var tpl = html;\n                            if (isFunction(data.tpl)) {\n                                tpl = data.tpl(el);\n                            }\n\n                            var lightChildren = [],\n                                handleContentNode = hasContent(tpl);\n\n                            if (handleContentNode) {\n                                var newCebContentId = 'ceb-content-' + counter++;\n                                lightChildren = cleanOldContentNode(el);\n\n                                tpl = replaceContent(tpl, newCebContentId);\n\n                                el.setAttribute(OLD_CONTENT_ID_ATTR_NAME, newCebContentId);\n                            }\n\n                            el.innerHTML = tpl;\n\n                            if (handleContentNode) {\n                                fillNewContentNode(el, lightChildren);\n                            }\n                        });\n                    }\n                }]);\n\n                return TemplateBuilder;\n            })(Builder);\n\n            _export('TemplateBuilder', TemplateBuilder);\n        }\n    };\n});"],"sourceRoot":"/source/"}